services:
  traefik:
    image: traefik:v3.0
    command:
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/etc/traefik/dynamic.yml
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
    networks:
      - traefik

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - internal

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    networks:
      - internal

  mailpit:
    image: axllent/mailpit:v1.27.4
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - internal

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    environment:
      DATABASE_URL: "postgresql+asyncpg://app:app@postgres/app"
    networks:
      - internal
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.auth.loadbalancer.server.port=8000"
      - "traefik.http.services.auth.loadbalancer.healthcheck.path=/healthz"
      - "traefik.http.services.auth.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.auth.loadbalancer.serversTransport=default@file"
      - "traefik.http.routers.auth.rule=Host(`api.tasks.localhost`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.routers.auth.middlewares=secure-headers@file,rate-limit@file,cors@file,compress@file"
      - "traefik.http.routers.auth-login.rule=Host(`api.tasks.localhost`) && Path(`/auth/login`)"
      - "traefik.http.routers.auth-login.entrypoints=web"
      - "traefik.http.routers.auth-login.priority=100"
      - "traefik.http.routers.auth-login.middlewares=secure-headers@file,rate-limit@file,login-rate-limit@file,cors@file,compress@file"
      - "traefik.http.routers.auth-login.service=auth"
      - "traefik.http.routers.api-root.rule=Host(`api.tasks.localhost`)"
      - "traefik.http.routers.api-root.entrypoints=web"
      - "traefik.http.routers.api-root.service=auth"

  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    environment:
      DATABASE_URL: "postgresql+asyncpg://app:app@postgres/app"
    networks:
      - internal
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.user.loadbalancer.server.port=8000"
      - "traefik.http.services.user.loadbalancer.healthcheck.path=/healthz"
      - "traefik.http.services.user.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.user.loadbalancer.serversTransport=default@file"
      - "traefik.http.routers.user.rule=Host(`api.tasks.localhost`) && PathPrefix(`/users`)"
      - "traefik.http.routers.user.entrypoints=web"
      - "traefik.http.routers.user.middlewares=secure-headers@file,rate-limit@file,cors@file,compress@file"

  task-service:
    build:
      context: .
      dockerfile: services/task-service/Dockerfile
    environment:
      TASKS_DATABASE_URL: "postgresql+asyncpg://app:app@postgres/app"
    networks:
      - internal
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.tasks.loadbalancer.server.port=8000"
      - "traefik.http.services.tasks.loadbalancer.healthcheck.path=/healthz"
      - "traefik.http.services.tasks.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.tasks.loadbalancer.serversTransport=default@file"
      - "traefik.http.routers.tasks.rule=Host(`api.tasks.localhost`) && PathPrefix(`/tasks`)"
      - "traefik.http.routers.tasks.entrypoints=web"
      - "traefik.http.routers.tasks.middlewares=secure-headers@file,rate-limit@file,cors@file,compress@file"

  web:
    build:
      context: .
      dockerfile: web/Dockerfile
    environment:
      INTERNAL_API_URL: http://auth-service:8000
    networks:
      - internal
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "traefik.http.routers.web.rule=Host(`app.tasks.localhost`)"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.routers.web.middlewares=secure-headers@file,rate-limit@file,compress@file"

networks:
  traefik:
    driver: bridge
  internal:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
